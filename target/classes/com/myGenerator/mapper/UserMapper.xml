<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myGenerator.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="social_role" jdbcType="VARCHAR" property="socialRole" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="account_expired" jdbcType="BIT" property="accountExpired" />
    <result column="account_locked" jdbcType="BIT" property="accountLocked" />
    <result column="password_expired" jdbcType="BIT" property="passwordExpired" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="passwd" jdbcType="VARCHAR" property="passwd" />
    <result column="token" jdbcType="VARCHAR" property="token" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    <result column="portrait" jdbcType="LONGVARCHAR" property="portrait" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    id, version, enabled, password, social_role, username, account_expired, account_locked, 
    password_expired, sex, phone_number, name, passwd, token
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    portrait
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myGenerator.entity.UserExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myGenerator.entity.UserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myGenerator.entity.UserExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    insert into user (id, version, enabled, 
      password, social_role, username, 
      account_expired, account_locked, password_expired, 
      sex, phone_number, name, 
      passwd, token, portrait
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{enabled,jdbcType=BIT}, 
      #{password,jdbcType=VARCHAR}, #{socialRole,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{accountExpired,jdbcType=BIT}, #{accountLocked,jdbcType=BIT}, #{passwordExpired,jdbcType=BIT}, 
      #{sex,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{passwd,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{portrait,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="socialRole != null">
        social_role,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="accountExpired != null">
        account_expired,
      </if>
      <if test="accountLocked != null">
        account_locked,
      </if>
      <if test="passwordExpired != null">
        password_expired,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="portrait != null">
        portrait,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myGenerator.entity.UserExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.socialRole != null">
        social_role = #{record.socialRole,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.accountExpired != null">
        account_expired = #{record.accountExpired,jdbcType=BIT},
      </if>
      <if test="record.accountLocked != null">
        account_locked = #{record.accountLocked,jdbcType=BIT},
      </if>
      <if test="record.passwordExpired != null">
        password_expired = #{record.passwordExpired,jdbcType=BIT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.passwd != null">
        passwd = #{record.passwd,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.portrait != null">
        portrait = #{record.portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      portrait = #{record.portrait,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        social_role = #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        account_expired = #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        account_locked = #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        password_expired = #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        portrait = #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myGenerator.entity.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Sep 08 17:28:16 CST 2018.
    -->
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.myGenerator.entity.User">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="social_role" jdbcType="VARCHAR" property="socialRole" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="account_expired" jdbcType="BIT" property="accountExpired" />
    <result column="account_locked" jdbcType="BIT" property="accountLocked" />
    <result column="password_expired" jdbcType="BIT" property="passwordExpired" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="passwd" jdbcType="VARCHAR" property="passwd" />
    <result column="token" jdbcType="VARCHAR" property="token" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.myGenerator.entity.User">
    <result column="portrait" jdbcType="LONGVARCHAR" property="portrait" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, version, enabled, password, social_role, username, account_expired, account_locked, 
    password_expired, sex, phone_number, name, passwd, token
  </sql>
  <sql id="Blob_Column_List">
    portrait
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myGenerator.entity.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myGenerator.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myGenerator.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myGenerator.entity.User">
    insert into user (id, version, enabled, 
      password, social_role, username, 
      account_expired, account_locked, password_expired, 
      sex, phone_number, name, 
      passwd, token, portrait
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{enabled,jdbcType=BIT}, 
      #{password,jdbcType=VARCHAR}, #{socialRole,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{accountExpired,jdbcType=BIT}, #{accountLocked,jdbcType=BIT}, #{passwordExpired,jdbcType=BIT}, 
      #{sex,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{passwd,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{portrait,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myGenerator.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="socialRole != null">
        social_role,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="accountExpired != null">
        account_expired,
      </if>
      <if test="accountLocked != null">
        account_locked,
      </if>
      <if test="passwordExpired != null">
        password_expired,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="portrait != null">
        portrait,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myGenerator.entity.UserExample" resultType="java.lang.Integer">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.socialRole != null">
        social_role = #{record.socialRole,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.accountExpired != null">
        account_expired = #{record.accountExpired,jdbcType=BIT},
      </if>
      <if test="record.accountLocked != null">
        account_locked = #{record.accountLocked,jdbcType=BIT},
      </if>
      <if test="record.passwordExpired != null">
        password_expired = #{record.passwordExpired,jdbcType=BIT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.passwd != null">
        passwd = #{record.passwd,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.portrait != null">
        portrait = #{record.portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      portrait = #{record.portrait,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myGenerator.entity.User">
    update user
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        social_role = #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        account_expired = #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        account_locked = #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        password_expired = #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        portrait = #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="portrait" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, version, enabled, password, social_role, username, account_expired, account_locked, 
    password_expired, sex, phone_number, name, passwd, token
  </sql>
  <sql id="Blob_Column_List">
    portrait
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myGenerator.entity.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myGenerator.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myGenerator.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myGenerator.entity.User">
    insert into user (id, version, enabled, 
      password, social_role, username, 
      account_expired, account_locked, password_expired, 
      sex, phone_number, name, 
      passwd, token, portrait
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{enabled,jdbcType=BIT}, 
      #{password,jdbcType=VARCHAR}, #{socialRole,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{accountExpired,jdbcType=BIT}, #{accountLocked,jdbcType=BIT}, #{passwordExpired,jdbcType=BIT}, 
      #{sex,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{passwd,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{portrait,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myGenerator.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="socialRole != null">
        social_role,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="accountExpired != null">
        account_expired,
      </if>
      <if test="accountLocked != null">
        account_locked,
      </if>
      <if test="passwordExpired != null">
        password_expired,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="portrait != null">
        portrait,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myGenerator.entity.UserExample" resultType="java.lang.Integer">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.socialRole != null">
        social_role = #{record.socialRole,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.accountExpired != null">
        account_expired = #{record.accountExpired,jdbcType=BIT},
      </if>
      <if test="record.accountLocked != null">
        account_locked = #{record.accountLocked,jdbcType=BIT},
      </if>
      <if test="record.passwordExpired != null">
        password_expired = #{record.passwordExpired,jdbcType=BIT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.passwd != null">
        passwd = #{record.passwd,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.portrait != null">
        portrait = #{record.portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      portrait = #{record.portrait,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myGenerator.entity.User">
    update user
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        social_role = #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        account_expired = #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        account_locked = #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        password_expired = #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        portrait = #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="portrait" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, version, enabled, password, social_role, username, account_expired, account_locked, 
    password_expired, sex, phone_number, name, passwd, token
  </sql>
  <sql id="Blob_Column_List">
    portrait
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myGenerator.entity.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myGenerator.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myGenerator.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myGenerator.entity.User">
    insert into user (id, version, enabled, 
      password, social_role, username, 
      account_expired, account_locked, password_expired, 
      sex, phone_number, name, 
      passwd, token, portrait
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{enabled,jdbcType=BIT}, 
      #{password,jdbcType=VARCHAR}, #{socialRole,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{accountExpired,jdbcType=BIT}, #{accountLocked,jdbcType=BIT}, #{passwordExpired,jdbcType=BIT}, 
      #{sex,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{passwd,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{portrait,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myGenerator.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="socialRole != null">
        social_role,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="accountExpired != null">
        account_expired,
      </if>
      <if test="accountLocked != null">
        account_locked,
      </if>
      <if test="passwordExpired != null">
        password_expired,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="portrait != null">
        portrait,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myGenerator.entity.UserExample" resultType="java.lang.Integer">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.socialRole != null">
        social_role = #{record.socialRole,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.accountExpired != null">
        account_expired = #{record.accountExpired,jdbcType=BIT},
      </if>
      <if test="record.accountLocked != null">
        account_locked = #{record.accountLocked,jdbcType=BIT},
      </if>
      <if test="record.passwordExpired != null">
        password_expired = #{record.passwordExpired,jdbcType=BIT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.passwd != null">
        passwd = #{record.passwd,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.portrait != null">
        portrait = #{record.portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      portrait = #{record.portrait,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myGenerator.entity.User">
    update user
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        social_role = #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        account_expired = #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        account_locked = #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        password_expired = #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        portrait = #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="BaseResultMap" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.myGenerator.entity.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="version" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="enabled" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="social_role" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="account_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="account_locked" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="password_expired" javaType="java.lang.Boolean" jdbcType="BIT" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="passwd" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="token" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="portrait" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, version, enabled, password, social_role, username, account_expired, account_locked, 
    password_expired, sex, phone_number, name, passwd, token
  </sql>
  <sql id="Blob_Column_List">
    portrait
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.myGenerator.entity.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.myGenerator.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.myGenerator.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.myGenerator.entity.User">
    insert into user (id, version, enabled, 
      password, social_role, username, 
      account_expired, account_locked, password_expired, 
      sex, phone_number, name, 
      passwd, token, portrait
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{enabled,jdbcType=BIT}, 
      #{password,jdbcType=VARCHAR}, #{socialRole,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{accountExpired,jdbcType=BIT}, #{accountLocked,jdbcType=BIT}, #{passwordExpired,jdbcType=BIT}, 
      #{sex,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{passwd,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{portrait,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.myGenerator.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="socialRole != null">
        social_role,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="accountExpired != null">
        account_expired,
      </if>
      <if test="accountLocked != null">
        account_locked,
      </if>
      <if test="passwordExpired != null">
        password_expired,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="portrait != null">
        portrait,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.myGenerator.entity.UserExample" resultType="java.lang.Integer">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
      <if test="record.enabled != null">
        enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.socialRole != null">
        social_role = #{record.socialRole,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.accountExpired != null">
        account_expired = #{record.accountExpired,jdbcType=BIT},
      </if>
      <if test="record.accountLocked != null">
        account_locked = #{record.accountLocked,jdbcType=BIT},
      </if>
      <if test="record.passwordExpired != null">
        password_expired = #{record.passwordExpired,jdbcType=BIT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNumber != null">
        phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.passwd != null">
        passwd = #{record.passwd,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.portrait != null">
        portrait = #{record.portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      portrait = #{record.portrait,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=BIGINT},
      version = #{record.version,jdbcType=BIGINT},
      enabled = #{record.enabled,jdbcType=BIT},
      password = #{record.password,jdbcType=VARCHAR},
      social_role = #{record.socialRole,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      account_expired = #{record.accountExpired,jdbcType=BIT},
      account_locked = #{record.accountLocked,jdbcType=BIT},
      password_expired = #{record.passwordExpired,jdbcType=BIT},
      sex = #{record.sex,jdbcType=VARCHAR},
      phone_number = #{record.phoneNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      passwd = #{record.passwd,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.myGenerator.entity.User">
    update user
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="socialRole != null">
        social_role = #{socialRole,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="accountExpired != null">
        account_expired = #{accountExpired,jdbcType=BIT},
      </if>
      <if test="accountLocked != null">
        account_locked = #{accountLocked,jdbcType=BIT},
      </if>
      <if test="passwordExpired != null">
        password_expired = #{passwordExpired,jdbcType=BIT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="portrait != null">
        portrait = #{portrait,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      portrait = #{portrait,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.myGenerator.entity.User">
    update user
    set version = #{version,jdbcType=BIGINT},
      enabled = #{enabled,jdbcType=BIT},
      password = #{password,jdbcType=VARCHAR},
      social_role = #{socialRole,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      account_expired = #{accountExpired,jdbcType=BIT},
      account_locked = #{accountLocked,jdbcType=BIT},
      password_expired = #{passwordExpired,jdbcType=BIT},
      sex = #{sex,jdbcType=VARCHAR},
      phone_number = #{phoneNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>